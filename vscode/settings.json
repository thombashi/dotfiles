{
// Editor

    // Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.
    "editor.formatOnSave": false,

    // Controls the font family.
    "editor.fontFamily": "'Fira Code', 'MyricaM M', Consolas, 'Courier New', monospace",

    // Controls the font size in pixels.
    "editor.fontSize": 12,

    // Enables font ligatures
    "editor.fontLigatures": true,

    // Controls if lines should wrap. The lines will wrap at min(editor.wrappingColumn, viewportWidthInColumns).
    "editor.wordWrap": "on",

    // Insert snippets when their prefix matches. Works best when 'quickSuggestions' aren't enabled.
    "editor.tabCompletion": true,

    // Controls whether the editor should render control characters
    "editor.renderControlCharacters": true,

    // Controls whether the editor should render whitespace characters
    "editor.renderWhitespace": "all",

    // Controls whether the editor should render indent guides
    "editor.renderIndentGuides": true,

    // Controls if the minimap is shown
    "editor.minimap.enabled": true,


// Window

    // Controls how windows are being reopened after a restart. Select 'none' to always start with an empty workspace, 'one' to reopen the last window you worked on, 'folders' to reopen all windows that had folders opened or 'all' to reopen all windows of your last session.
    "window.restoreWindows": "all",

    // Controls how to open items in trees and lists using the mouse (if supported). Set to `singleClick` to open items with a single mouse click and `doubleClick` to only open via mouse double click. For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable.
    "workbench.list.openMode": "doubleClick",

    // Controls the sizing of editor tabs. Set to 'fit' to keep tabs always large enough to show the full editor label. Set to 'shrink' to allow tabs to get smaller when the available space is not enough to show all tabs at once.
    "workbench.editor.tabSizing": "shrink",


// Terminal

    // Controls the style of terminal cursor.
    "terminal.integrated.cursorStyle": "line",

    // Controls the font size in pixels of the terminal.
    "terminal.integrated.fontSize": 12,

    // When set, text selected in the terminal will be copied to the clipboard.
    "terminal.integrated.copyOnSelection": true,

    // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows
    "terminal.integrated.env.windows": {
        "PYTHONDONTWRITEBYTECODE": 1
    },

    // Controls the font family of the terminal, this defaults to editor.fontFamily's value.
    "terminal.integrated.fontFamily": "'Fira Code'",

    // The path of the shell that the terminal uses on Windows. When using shells shipped with Windows (cmd, PowerShell or Bash on Ubuntu).
    "terminal.integrated.shell.windows": "C:\\Windows\\sysnative\\bash.exe",

    // Controls the maximum amount of lines the terminal keeps in its buffer.
    "terminal.integrated.scrollback": 8192,


// Files

    // The default end of line character.
    "files.eol": "\n",

    // Controls auto save of dirty files. Accepted values:  "off", "afterDelay", "onFocusChange" (editor loses focus), "onWindowChange" (window loses focus). If set to "afterDelay", you can configure the delay in "files.autoSaveDelay".
    "files.autoSave": "afterDelay",

    // Controls the delay in ms after which a dirty file is saved automatically. Only applies when "files.autoSave" is set to "afterDelay"
    "files.autoSaveDelay": 60000,

    // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.
    "files.exclude": {
        "**/.eggs": true,
        "**/*.egg-info": true,
        "**/.git": true,
        "**/.hg": true,
        "**/.jupyter": true,
        "**/.ipynb_checkpoints": true,
        "**/.pytest_cache": true,
        "**/.python-version": true,
        "**/.svn": true,
        "**/.vscode": true,
        "**/*.lnk": true,
        "**/*.pdb": true,

        "**/.DS_Store": true,
        "**/CVS": true
    },

    // When enabled, will trim trailing whitespace when you save a file.
    "files.trimTrailingWhitespace": true,


// Telemetry

    // Enable crash reports to be sent to Microsoft.
    // This option requires restart to take effect.
    "telemetry.enableCrashReporter": false,

    // Enable usage data and errors to be sent to Microsoft.
    "telemetry.enableTelemetry": false,


// cpp

    // Name of the predefined style used as a fallback in case clang-format is invoked with style "file" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, or none.
    "C_Cpp.clang_format_fallbackStyle": "Visual Studio",

    // If set, overrides the include sorting behavior determined by the SortIncludes parameter.
    "C_Cpp.clang_format_sortIncludes": true,


// Python Configuration

    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.autopep8Args": ["--max-line-length", "100"],

    // Whether to lint Python files using pylama.
    "python.linting.pylamaEnabled": true,

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pylintArgs": ["--errors-only"],

    // Arguments passed in. Each argument is a separate item in the array.
    "python.sortImports.args": [
        "--lines", "100",
        "--multi-line", "4",
        "-ns", "__init__.py"
    ],


// AutoDocstring Configuration

    // Which docstring format to use.
    "autoDocstring.docstringFormat": "google",

    // Generate docstring on pressing enter after opening a docstring (""")
    "autoDocstring.generateDocstringOnEnter": false,


// javascript autolinting

    // Set default linters to be used when no configuration file can be found in the current workspace.
    "jsAutolint.defaultLinters": [
        "tslint",
        "jshint"
    ],


// ShellCheck
    // Exclude types of warnings, for example ["SC1090"].
    "shellcheck.exclude": [
        "SC1001",  // This \o will be a regular 'o' in this context.
        "SC1012",  // \t is just literal 't' here. For tab, use "$(printf "\t")" instead.
    ],

    // Whether shellcheck is run on save or on type.
    "shellcheck.run": "onSave",


// etc.

    // Specifies whether to enable GitLens telemetry (even if enabled still abides by the overall `telemetry.enableTelemetry` setting
    "gitlens.advanced.telemetry.enabled": false,

    // Use ordered list (1. ..., 2. ...)
    "markdown.extension.toc.orderedList": false,
}
